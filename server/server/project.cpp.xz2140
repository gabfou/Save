#include "server.h"
#include "project.h"
#include "question.h"
#include <stdio.h>
#include <string.h>
#include "../../graphique/graphique/mainwindow.h"
#include "le.h"

#include <QThread>

// unused

vector<group> project::getListgroup() const
{
    return listgroup;
}

void project::checkmailcalendar()
{

}


// constructeur et destructeur

project::project()
{

}

project::project(string fproject)
{
    this->initoroject(fproject);
}


// fonction d'ajout d'element dans le projet
 void project::addperson(string name, string lastname, string email)
{
	this->nbperson++;
	person ret(name, lastname, email);
	this->listp.push_back(ret);
}

inline void project::addperson(string name, string lastname, string email, int id, list<question> listquestion)
{
	this->nbperson++;
	person ret(name, lastname, email, id, listquestion);
	this->listp.push_back(ret);
}

inline void project::addquestion(string name, string group)
{
	this->nbquestion++;
	question ret(name, group);
	this->listquestion.push_back(ret);
}

void project::addreponse(int id, string name, int time, int note, string date)
{
	list<person>::iterator tmp;

	tmp = listp.begin();
	qDebug() << to_string(id).c_str();
	while (tmp != listp.end())
	{
		if ((*tmp).compare(id) == 0)
		{
			(*tmp).add_fact(name, time, note, date);
			return ;
		}
		tmp++;
	}
}

inline void project::addgroup(string name, int id)
{
	group ret(name, id);
    qDebug() << "qsd";
	this->listgroup.push_back(ret);
}

static int checkvalide(string line)
{
	int i = -1;

	while (line[++i])
	{
		if (line[i] == ' ' && i != 0 && isalnum(line[i - 1]) && isalnum(line[i + 1]))
			return (1);
	}
	return (0);
}

inline question newquestion(string line)
{
	question ret(line, 0);
	return(ret);
}

int listcompare(list<person> listp, string line)
{
	list<person>::iterator tmp;

	tmp = listp.begin();
	while (tmp != listp.end())
	{
		if ((*tmp).compare(line) == 0)
		{
			return (1);
		}
		tmp++;
	}
	return (0);
}

void project::initoroject(string fproject)
{
	this->name = fproject;
	QSqlQuery query;


    this->addgroup("ALL", 0);
    if(query.exec(("SELECT groupname, groupparent, id FROM project_" + fproject + "_groupe").c_str()))
	{
		while(query.next())
		{
            this->addgroup(query.value(0).toString().toStdString(),
                           query.value(2).toInt());
		}
	}
    if(query.exec(("SELECT question,groupid FROM project_" + fproject + "_question").c_str()))
	{
		while(query.next())
		{
			this->addquestion(query.value(0).toString().toStdString(),
							query.value(1).toString().toStdString());
		}
	}
    if(query.exec(("SELECT id, firstname,lastname,email,groupid FROM project_" + fproject + "_project").c_str()))
	{
		while(query.next())
		{
			this->addperson(query.value(1).toString().toStdString(),
							query.value(2).toString().toStdString(),
							query.value(3).toString().toStdString(),
							query.value(0).toInt(),
							this->listquestion);
            if (!query.value(4).isNull() && query.value(4).toInt() > 0)
                this->listgroup[query.value(4).toInt()].addperson(this->listp.back());
            else
            	this->listgroup[0].addperson(this->listp.back());
		}
	}
	if(query.exec(("SELECT idperson,name,time,note,date_info FROM project_" + fproject + "_reponse").c_str()))
	{
		while(query.next())
		{
			this->addreponse(query.value(0).toInt(),
							 query.value(1).toString().toStdString(),
							 query.value(2).toInt(),
							 query.value(3).toInt(),
							 query.value(4).toString().toStdString());
		}
	}
}

void	project::projectshow(MainWindow *main, QTableWidget *gbox)
{
    list<person*>::iterator tmp;
	list<question>::iterator tmp2;
	int i = 0;
    int j = -1;


	//QTableWidget *gbox = new QTableWidget(window);
	gbox->setRowCount(this->nbperson);
	gbox->setColumnCount(this->nbquestion /* 2*/);
	tmp2 = this->listquestion.begin();
	while (tmp2 != this->listquestion.end())
	{
		gbox->setHorizontalHeaderItem(i++, new QTableWidgetItem(("moyenne " + tmp2->name + "").c_str()));
		//gbox->setHorizontalHeaderItem(i++, new QTableWidgetItem(("temps a " + tmp2->name + " reel").c_str()));
		tmp2++;
	}
	i = 0;
    while (++j < this->listgroup.size())
	{
        qDebug() << this->listgroup[j].getName().c_str();
        tmp = this->listgroup[j].getListp().begin();
        while (tmp != this->listgroup[j].getListp().end())
        {
            (*tmp)->personshow(gbox, i++);
            qDebug() << "1";
			tmp++;
		}
        qDebug() << "2";
	}
	//scroll->setWidget(window);
	//window->setLayout(gbox);
}
QStringList	project::sendproject(Smtp * smtp)
{
	list<person>::iterator tmp;
	QStringList listmail;
	QString post = (this->name.c_str());
	post.append("&");
	post.append(this->postquestion("ALL"));

	tmp = this->listp.begin();
	while (tmp != this->listp.end())
	{
		listmail.push_back((*tmp).personsend(smtp, post));
		listmail.push_back(QString::number((*tmp).id));
		tmp++;
	}
	return (listmail);
}

// obsolete

void	project::send()
{
	list<person>::iterator tmp;

	tmp = this->listp.begin();
	while (tmp != this->listp.end())
	{
		(*tmp).personsend();
		tmp++;
	}
}

QString	project::postquestion(QString group) //creation de l url
{
	list<question>::iterator tmp;
	QString ret = "";

	tmp = this->listquestion.begin();
	while (tmp != this->listquestion.end())
	{
		ret.append(((*tmp).name + "=0&").c_str());
		tmp++;
	}
	return ret;
}

/*void project::update(QString *str)
{
	QStringList				list;
	list<person>::iterator	tmp;
	fact					ftmp;
	int						i;
	int						id;


	list = str.split("\n");
	foreach(QString str2, list)
	{
		id = atoi(str2);
		i = str.indexOf(str2, 0);
		tmp = this->listp.begin();
		while (tmp != this->listp.end())
		{
			if ((*tmp).getId() == id)
			{
				(*tmp).add_fact(&(str2.toStdString()[i]));
				break;
			}
			tmp++;
		}
	}
}*/

void project::convert_to_xlsx()
{

}

project::~project()
{

}
