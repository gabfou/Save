#include "group.h"
#include "person.h"
#include "question.h"

QColor panelgcolor[5] = {Qt::cyan, Qt::magenta, Qt::yellow, Qt::blue, Qt::darkGreen};

string group::getName() const{return this->name;}
list<person> group::getListp(){return this->listp;}
int group::getGeneration() const{return generation;}
int group::getParentid() const{return parentid;}
QColor group::getColor() const{return color;}
void group::setColor(const QColor &value){color = value;}


void    group::addfils(int id)
{
    qDebug() << QString::number(id);
    int dafuq = id;
    this->listfils.push_back(dafuq);
}

group::group()
{

}

group::group(string name, int parentid, int id, vector<group> listgroup)
{
    this->name = name;
    this->parentid = parentid;
	this->id = id;
    this->groupsetcolor(id);
    if (parentid > -1 && parentid < listgroup.size())
    {
        listgroup[parentid].addfils(id);
        this->generation = listgroup[parentid].getGeneration() + 1;
    }
    else if (parentid == -1)
       this->generation = -1;
    else
    {
    	this->generation = 0;
        warning("probleme de base de donnée: groupe pere eronée ou placer apres groupe fils");
    }
}

void group::addperson(person p)
{
	person p2(p);
	this->listp.push_back(p2);
	qDebug() << p2.getName().c_str();
}

void group::debug()
{
	list<person>::iterator tmp;
		tmp = this->listp.begin();
		while (tmp != this->listp.end())
		{
			//this->listgroup[tmp->getGroupid()].addperson(*tmp);
            qDebug() << tmp->getName().c_str();
            tmp++;
		}
}

QList<int> group::getListfils() const
{
    return listfils;
}

void group::showgroupauxi(QTableWidget *gbox, int *i, int k, group gtmp, int ref, list<question>::iterator tmp2)
{
    list<person>::iterator tmp;
    int nb = 0;
    int l = 0;
    tmp = this->listp.begin();
    int ri = (ref) ? *i + 1 : *i;

    while (tmp != this->listp.end())
    {
        if (ref == 0)
        {
            if ((nb += (*tmp).personshowcase(gbox, ri, tmp2->name)) != 0)
                l++;
        }
        else
            if ((nb += (*tmp).personrefshowcase(gbox, ri, tmp2->name)) != 0)
                l++;
        tmp++;
    }
    if (l != 0)
    {
        gbox->setItem(ri, k, new QTableWidgetItem(QString::number(nb / l)));
        gbox->item(ri, (k)++)->setBackgroundColor(gtmp.getColor());
    }
    else
    {
        gbox->setItem(ri, k, new QTableWidgetItem("NA"));
        gbox->item(ri, (k)++)->setBackgroundColor(gtmp.getColor());
    }
}

void group::showgroup(QTableWidget *gbox, int *i, list<question> questionlist, vector<group> listgroup, int k)
{
    list<question>::iterator tmp2;
    group gtmp = *this;

    //afficher les groupe

    while (gtmp.getGeneration() > 0)
    {
        gbox->setItem(*i, gtmp.getGeneration() - 1, new QTableWidgetItem(gtmp.getName().c_str()));
        //gbox->item(*i, gtmp.getGeneration() - 1)->setBackgroundColor(Qt::red);
        if (g_ref)
            gbox->setItem(*i + 1, gtmp.getGeneration() - 1, new QTableWidgetItem(gtmp.getName().c_str()));
        gtmp = listgroup[gtmp.getParentid()];
    }
    tmp2 = questionlist.begin();
    if (tmp2 != questionlist.end() && this->listp.empty() == 0)
    {
    gbox->setVerticalHeaderItem(*i, new QTableWidgetItem(gtmp.getName().c_str()));
    gbox->verticalHeaderItem(*i)->setBackgroundColor(gtmp.getColor());
    if (g_ref)
    {
        gbox->setVerticalHeaderItem(*i + 1, new QTableWidgetItem((gtmp.getName() + " ref").c_str()));
        gbox->verticalHeaderItem(*i + 1)->setBackgroundColor(gtmp.getColor());
    }
    }
    //afficher reponse au question

    tmp2 = questionlist.begin();
    while (tmp2 != questionlist.end())
    {
        this->showgroupauxi(gbox, i, k, gtmp, 0, tmp2);
        if (g_ref)
            this->showgroupauxi(gbox, i, k, gtmp, 1, tmp2);
        tmp2++;
	}
    (*i)++;
    if (g_ref)
        (*i)++;
}

void group::groupsetcolor(int i)
{
    this->color = panelgcolor[i % 5];
}

void group::show(QTableWidget *gbox, int *i, vector<group> listgroup, int k)
{
	list<person>::iterator tmp;
    group gtmp = *this;

	tmp = this->listp.begin();
	while (tmp != this->listp.end())
	{
        while (gtmp.getGeneration() > 0)
        {
            gbox->setItem(*i, gtmp.getGeneration() - 1, new QTableWidgetItem(gtmp.getName().c_str()));
            gtmp = listgroup[gtmp.getParentid()];
        }
        gbox->setVerticalHeaderItem(*i, new QTableWidgetItem(gtmp.getName().c_str()));
//		gbox->setVerticalHeaderItem(*i, new QTableWidgetItem((*tmp).getName().c_str()));
        gbox->setItem(*i, k - 1, new QTableWidgetItem((*tmp).getName().c_str()));
        (*tmp).personshow(gbox, (*i)++, k);
		tmp++;
	}
}

group::~group()
{

}
